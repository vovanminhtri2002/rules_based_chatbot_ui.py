import streamlit as st
from datetime import datetime

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="ChatGPT Clone", layout="wide")

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üß† ChatGPT UI Clone with Streamlit")

# H√†m x·ª≠ l√Ω ph·∫£n h·ªìi c·ªßa chatbot
def respond_to_user(user_input):
    user_input = user_input.lower().strip()

    if user_input == "hi":
        return (
            "Xin ch√†o qu√Ω kh√°ch! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho qu√Ω kh√°ch?\n"
            "['T∆∞ v·∫•n mua h√†ng', 'Tra c·ª©u b·∫£o h√†nh', 'H·ªó tr·ª£ k·ªπ thu·∫≠t']"
        )
    elif user_input == "hello":
        return (
            "Xin ch√†o, b·∫°n c·∫ßn t√¥i gi√∫p g√¨ kh√¥ng?\n"
            "['T∆∞ v·∫•n mua h√†ng', 'Tra c·ª©u b·∫£o h√†nh', 'H·ªó tr·ª£ k·ªπ thu·∫≠t']"
        )
    elif user_input == "t∆∞ v·∫•n mua h√†ng":
        return ["ƒêi·ªán tho·∫°i", "Laptop", "M√°y t√≠nh b·∫£ng"]
    elif user_input == "ƒëi·ªán tho·∫°i":
        return "Qu√Ω kh√°ch mu·ªën mua ƒëi·ªán tho·∫°i n√†o ·∫°?"
    elif user_input == "laptop":
        return "Qu√Ω kh√°ch mu·ªën mua laptop n√†o ·∫°?"
    elif user_input == "m√°y t√≠nh b·∫£ng":
        return "Qu√Ω kh√°ch mu·ªën mua tablet n√†o ·∫°?"
    elif user_input == "tra c·ª©u b·∫£o h√†nh":
        return ["Tra c·ª©u b·∫±ng s·ªë ƒëi·ªán tho·∫°i", "Tra c·ª©u b·∫±ng IMEI"]
    elif user_input == "tra c·ª©u b·∫±ng s·ªë ƒëi·ªán tho·∫°i":
        return "Qu√Ω kh√°ch vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ tra c·ª©u b·∫£o h√†nh"
    elif user_input == "tra c·ª©u b·∫±ng imei":
        return "Qu√Ω kh√°ch vui l√≤ng nh·∫≠p IMEI ƒë·ªÉ tra c·ª©u b·∫£o h√†nh"
    elif user_input == "h·ªó tr·ª£ k·ªπ thu·∫≠t":
        return ["L·ªói ph·∫ßn c·ª©ng", "L·ªói ph·∫ßn m·ªÅm"]
    elif user_input == "l·ªói ph·∫ßn c·ª©ng":
        return "Qu√Ω kh√°ch vui l√≤ng m√¥ t·∫£ l·ªói ph·∫ßn c·ª©ng ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£"
    elif user_input == "l·ªói ph·∫ßn m·ªÅm":
        return "Qu√Ω kh√°ch vui l√≤ng m√¥ t·∫£ l·ªói ph·∫ßn m·ªÅm ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£"
    else:
        return "Xin l·ªói! T√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n kh√¥ng?"

# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        if isinstance(message["content"], list):
            st.markdown(", ".join(message["content"]))
        else:
            st.markdown(message["content"])

# Nh·∫≠n ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng
prompt = st.chat_input("Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...")

if prompt:
    # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    st.session_state.chat_history.append({"role": "user", "content": prompt})

    # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    with st.chat_message("user"):
        st.markdown(prompt)

    # G·ªçi h√†m respond_to_user ƒë·ªÉ l·∫•y ph·∫£n h·ªìi
    response = respond_to_user(prompt)

    # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa chatbot
    with st.chat_message("assistant"):
        if isinstance(response, list):
            st.markdown(", ".join(response))
        else:
            st.markdown(response)

    # L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ chat
    st.session_state.chat_history.append({"role": "assistant", "content": response})